import numpy as np

def jovian_jrm33_order18_internal_xyz( x_rj, y_rj, z_rj):
    # Code to calculate the JRM33_ORDER18 model of Jupiter's internal magnetic field model
    # with Degree 18 and Order 18.
    # Reference: Connerney et al. (2022),  https://doi.org/10.1029/2021JE007055
    #
    # Required inputs (System III (1965) Cartesian, right handed, and assuming 1 Rj = 71492 km):
    #  x_rj       - Jupiter SYSIII right-handed position in x, in Rj.
    #  y_rj       - Jupiter SYSIII right-handed position in y, in Rj.
    #  z_rj       - Jupiter SYSIII right-handed position in z, in Rj.
    #
    # Outputs:
    #  B - Cartesian Magnetic field vector the JRM33_ORDER18 internal magnetic field model, [Bx, By, Bz], units of nT.
    #
    # Usage:
    # For internal field only: B = jovian_jrm33_order18_internal_xyz(x_rj, y_rj, z_rj)
    #
    # This code was written by Marissa Vogt (mvogt@bu.edu) and Rob Wilson (rob.wilson@lasp.colorado.edu).
    # It is based on a routine originally written by K. Khurana, translated into IDL by Marissa Vogt in 2009.
    #
    # Citation Info:
    #  DOI: 10.5281/zenodo.6814109     This DOI links to all versions of code at the Github.
    #  Github: https://github.com/rjwilson-LASP/PSH
    #  Individual versions released on the Github repository can have a different DOI,
    #  See the DOI above for a list of DOIs for each specific Github released version.
    #
    # Version Info:
    #  Last update of this file: 2024-03-13 11:48:53.866291 by user wilsonr. 
    #  This code was re-written/re-formatted by the Mother_Source python code:
    #   /Users/wilsonr/Documents/Publications_Presentations/GitHub_Desktop/PSH/Mother_Source/MOP_spherical.py
    #   which itself was last updated at UTC 2024-03-13T17:48:37.
    #
    #  The Spherical Harmonic g and h values used for this order 18 code are below: 
    #  
    #  g[i,j] values (nT) used are:
    # g[ 1, 0] =   410993.4, g[ 1, 1] =   -71305.9, 
    # g[ 2, 0] =    11796.7, g[ 2, 1] =   -56972.4, g[ 2, 2] =    48250.2, 
    # g[ 3, 0] =     2799.3, g[ 3, 1] =   -37488.4, g[ 3, 2] =    15396.8, g[ 3, 3] =    -1489.8, 
    # g[ 4, 0] =   -34402.0, g[ 4, 1] =    -8080.8, g[ 4, 2] =    -2440.5, g[ 4, 3] =   -10848.3, g[ 4, 4] =   -17919.1, 
    # g[ 5, 0] =   -18265.7, g[ 5, 1] =     4221.8, g[ 5, 2] =    16599.5, g[ 5, 3] =   -17345.8, g[ 5, 4] =    -2544.5, g[ 5, 5] =    -4987.7, 
    # g[ 6, 0] =   -20968.0, g[ 6, 1] =     9887.6, g[ 6, 2] =    12192.4, g[ 6, 3] =   -12548.7, g[ 6, 4] =     2742.2, g[ 6, 5] =     1557.6, g[ 6, 6] =     8018.2, 
    # g[ 7, 0] =       59.9, g[ 7, 1] =     5366.1, g[ 7, 2] =    -7099.5, g[ 7, 3] =    -1533.4, g[ 7, 4] =    -7055.7, g[ 7, 5] =     3060.6, g[ 7, 6] =    -2488.3, g[ 7, 7] =     3700.8, 
    # g[ 8, 0] =    10849.5, g[ 8, 1] =     1323.8, g[ 8, 2] =    -6952.2, g[ 8, 3] =      -95.0, g[ 8, 4] =    -4746.6, g[ 8, 5] =    -1301.7, g[ 8, 6] =    -4284.6, g[ 8, 7] =    -1436.7, g[ 8, 8] =    -3024.6, 
    # g[ 9, 0] =     8914.4, g[ 9, 1] =    -3506.7, g[ 9, 2] =      288.1, g[ 9, 3] =      773.6, g[ 9, 4] =     3592.7, g[ 9, 5] =    -3170.8, g[ 9, 6] =     1406.3, g[ 9, 7] =    -1526.6, g[ 9, 8] =     1313.3, g[ 9, 9] =    -2314.6, 
    # g[10, 0] =    -2516.5, g[10, 1] =     1883.2, g[10, 2] =     2836.1, g[10, 3] =     4259.4, g[10, 4] =     3776.7, g[10, 5] =      764.4, g[10, 6] =     2112.3, g[10, 7] =      724.8, g[10, 8] =     2496.3, g[10, 9] =      840.1, g[10,10] =     1179.4, 
    # g[11, 0] =     1311.6, g[11, 1] =     3056.9, g[11, 2] =    -2060.6, g[11, 3] =     3550.1, g[11, 4] =      589.7, g[11, 5] =      194.8, g[11, 6] =    -1073.3, g[11, 7] =     -521.7, g[11, 8] =      685.3, g[11, 9] =      350.2, g[11,10] =     -326.6, g[11,11] =     1088.8, 
    # g[12, 0] =     2300.5, g[12, 1] =     1688.4, g[12, 2] =     -291.7, g[12, 3] =      483.2, g[12, 4] =     -581.9, g[12, 5] =     -818.4, g[12, 6] =    -1095.6, g[12, 7] =    -1987.8, g[12, 8] =      484.5, g[12, 9] =    -1473.1, g[12,10] =     -666.5, g[12,11] =     -755.4, g[12,12] =     -220.8, 
    # g[13, 0] =      751.5, g[13, 1] =     -456.4, g[13, 2] =     1160.4, g[13, 3] =    -2307.8, g[13, 4] =      -77.1, g[13, 5] =      -16.9, g[13, 6] =      594.8, g[13, 7] =     -950.7, g[13, 8] =     1042.3, g[13, 9] =     -641.8, g[13,10] =       41.6, g[13,11] =     -229.1, g[13,12] =      -40.3, g[13,13] =     -287.8, 
    # g[14, 0] =     1164.6, g[14, 1] =    -2478.0, g[14, 2] =      907.7, g[14, 3] =    -1280.7, g[14, 4] =      148.5, g[14, 5] =     1468.8, g[14, 6] =       -8.1, g[14, 7] =      604.5, g[14, 8] =      787.2, g[14, 9] =      327.7, g[14,10] =      111.6, g[14,11] =      245.2, g[14,12] =      127.3, g[14,13] =      425.9, g[14,14] =        6.3, 
    # g[15, 0] =      469.4, g[15, 1] =    -1929.2, g[15, 2] =      -38.7, g[15, 3] =     -815.9, g[15, 4] =     -775.7, g[15, 5] =       31.0, g[15, 6] =     -149.9, g[15, 7] =      318.2, g[15, 8] =     -298.3, g[15, 9] =     -149.3, g[15,10] =      241.4, g[15,11] =      -69.4, g[15,12] =      367.0, g[15,13] =      -22.2, g[15,14] =       91.8, g[15,15] =      -43.7, 
    # g[16, 0] =     -809.2, g[16, 1] =     -888.9, g[16, 2] =     -604.0, g[16, 3] =     -339.1, g[16, 4] =     -350.6, g[16, 5] =     -503.8, g[16, 6] =     -235.5, g[16, 7] =        9.0, g[16, 8] =     -498.7, g[16, 9] =     -283.2, g[16,10] =      -50.9, g[16,11] =     -515.2, g[16,12] =     -255.3, g[16,13] =       15.6, g[16,14] =      -24.7, g[16,15] =     -176.5, g[16,16] =       49.2, 
    # g[17, 0] =    -1238.7, g[17, 1] =     -190.2, g[17, 2] =     -101.5, g[17, 3] =      -58.0, g[17, 4] =       10.0, g[17, 5] =     -525.9, g[17, 6] =      468.4, g[17, 7] =       88.1, g[17, 8] =     -385.1, g[17, 9] =       77.6, g[17,10] =       75.7, g[17,11] =     -148.9, g[17,12] =      201.8, g[17,13] =       61.7, g[17,14] =     -243.6, g[17,15] =      168.2, g[17,16] =      -42.2, g[17,17] =        7.3, 
    # g[18, 0] =     -796.0, g[18, 1] =      443.6, g[18, 2] =      266.9, g[18, 3] =      391.2, g[18, 4] =      366.2, g[18, 5] =      175.8, g[18, 6] =      512.5, g[18, 7] =      151.0, g[18, 8] =      214.9, g[18, 9] =      243.4, g[18,10] =      337.5, g[18,11] =      -10.2, g[18,12] =      -34.9, g[18,13] =      161.2, g[18,14] =      222.3, g[18,15] =     -119.6, g[18,16] =       28.0, g[18,17] =      132.6, g[18,18] =     -180.6, 
    #
    #  h[i,j] values (nT) used are:
    #                        h[ 1, 1] =    20958.4, 
    #                        h[ 2, 1] =   -42549.0, h[ 2, 2] =    20221.5, 
    #                        h[ 3, 1] =   -32890.6, h[ 3, 2] =    42518.4, h[ 3, 3] =   -27397.7, 
    #                        h[ 4, 1] =    32452.4, h[ 4, 2] =    27438.6, h[ 4, 3] =     -501.4, h[ 4, 4] =    -1325.1, 
    #                        h[ 5, 1] =    45363.1, h[ 5, 2] =     -826.2, h[ 5, 3] =     6000.6, h[ 5, 4] =    10568.8, h[ 5, 5] =    10091.5, 
    #                        h[ 6, 1] =    14016.9, h[ 6, 2] =   -10119.1, h[ 6, 3] =     -294.9, h[ 6, 4] =    13948.3, h[ 6, 5] =    -3686.9, h[ 6, 6] =     4783.1, 
    #                        h[ 7, 1] =    -7654.8, h[ 7, 2] =   -11398.6, h[ 7, 3] =     2171.0, h[ 7, 4] =     5301.6, h[ 7, 5] =    -6618.1, h[ 7, 6] =    -1933.8, h[ 7, 7] =    -5802.9, 
    #                        h[ 8, 1] =    -2297.4, h[ 8, 2] =   -12833.5, h[ 8, 3] =    10019.6, h[ 8, 4] =    -1725.6, h[ 8, 5] =     2387.1, h[ 8, 6] =    -3237.1, h[ 8, 7] =      906.1, h[ 8, 8] =    -3178.3, 
    #                        h[ 9, 1] =    -7899.6, h[ 9, 2] =    -1328.3, h[ 9, 3] =     6566.5, h[ 9, 4] =    -1275.3, h[ 9, 5] =     3617.1, h[ 9, 6] =     -194.8, h[ 9, 7] =     1960.3, h[ 9, 8] =      956.9, h[ 9, 9] =     1831.7, 
    #                        h[10, 1] =    -5689.8, h[10, 2] =     5570.3, h[10, 3] =    -2541.6, h[10, 4] =    -1795.2, h[10, 5] =     -217.8, h[10, 6] =     -628.3, h[10, 7] =    -1619.6, h[10, 8] =      454.6, h[10, 9] =     -840.0, h[10,10] =     1581.4, 
    #                        h[11, 1] =      549.1, h[11, 2] =     4527.6, h[11, 3] =    -4223.0, h[11, 4] =    -2761.9, h[11, 5] =     -476.0, h[11, 6] =    -2714.4, h[11, 7] =    -1349.2, h[11, 8] =    -1649.0, h[11, 9] =    -1471.5, h[11,10] =     -583.0, h[11,11] =     -499.8, 
    #                        h[12, 1] =     4204.2, h[12, 2] =     2228.0, h[12, 3] =    -1901.1, h[12, 4] =    -1271.2, h[12, 5] =     1073.4, h[12, 6] =    -1111.9, h[12, 7] =      872.9, h[12, 8] =     -837.9, h[12, 9] =     -462.8, h[12,10] =      -22.0, h[12,11] =      110.3, h[12,12] =     -712.7, 
    #                        h[13, 1] =     4125.6, h[13, 2] =      -44.0, h[13, 3] =     -455.4, h[13, 4] =     2160.6, h[13, 5] =      255.4, h[13, 6] =     1105.1, h[13, 7] =     1214.2, h[13, 8] =      196.1, h[13, 9] =     -207.7, h[13,10] =     1195.7, h[13,11] =      472.4, h[13,12] =      721.6, h[13,13] =       51.3, 
    #                        h[14, 1] =     -847.8, h[14, 2] =     -124.9, h[14, 3] =      108.8, h[14, 4] =     1456.2, h[14, 5] =    -1284.6, h[14, 6] =      896.5, h[14, 7] =      237.0, h[14, 8] =      225.8, h[14, 9] =      -80.9, h[14,10] =      696.9, h[14,11] =      326.5, h[14,12] =      225.9, h[14,13] =       71.0, h[14,14] =      124.4, 
    #                        h[15, 1] =    -1146.4, h[15, 2] =     -580.4, h[15, 3] =      527.3, h[15, 4] =      120.0, h[15, 5] =     -478.9, h[15, 6] =      148.4, h[15, 7] =       45.7, h[15, 8] =     -882.5, h[15, 9] =     -206.6, h[15,10] =      -74.9, h[15,11] =       51.0, h[15,12] =       36.4, h[15,13] =      -44.4, h[15,14] =     -285.9, h[15,15] =      135.1, 
    #                        h[16, 1] =     -932.8, h[16, 2] =     -608.1, h[16, 3] =      510.2, h[16, 4] =     -587.4, h[16, 5] =      -39.4, h[16, 6] =      358.1, h[16, 7] =      279.8, h[16, 8] =      244.5, h[16, 9] =      487.3, h[16,10] =      366.7, h[16,11] =       93.9, h[16,12] =      282.8, h[16,13] =     -267.7, h[16,14] =       39.8, h[16,15] =     -213.1, h[16,16] =       32.4, 
    #                        h[17, 1] =     -209.2, h[17, 2] =      -15.8, h[17, 3] =       54.4, h[17, 4] =      308.7, h[17, 5] =      722.0, h[17, 6] =      233.3, h[17, 7] =      -82.1, h[17, 8] =      221.5, h[17, 9] =      488.6, h[17,10] =      206.3, h[17,11] =      176.7, h[17,12] =      353.4, h[17,13] =      204.8, h[17,14] =      -29.5, h[17,15] =       12.8, h[17,16] =      -89.6, h[17,17] =     -166.6, 
    #                        h[18, 1] =      670.9, h[18, 2] =     -176.1, h[18, 3] =     -340.3, h[18, 4] =       37.0, h[18, 5] =      304.3, h[18, 6] =     -348.8, h[18, 7] =     -291.9, h[18, 8] =      165.6, h[18, 9] =      360.9, h[18,10] =     -119.0, h[18,11] =      100.1, h[18,12] =       26.9, h[18,13] =        1.0, h[18,14] =      -60.2, h[18,15] =       66.5, h[18,16] =      277.8, h[18,17] =       29.1, h[18,18] =       15.3, 
    
    # Check inputs x_rj, y_rj and z_rj are all numbers, and convert to numpy doubles here.
    try:
        x_rj = np.float64(x_rj)
        y_rj = np.float64(y_rj)
        z_rj = np.float64(z_rj)
    except Exception as e:
        print('ERROR: Inputs must be numeric.')
        raise SystemExit
    
    # Check inputs are same size.
    N_input = x_rj.size
    scalar_input = (N_input == 1)  # scalar or not
    
    # Check inputs x_rj, y_rj and z_rj are all arrays of the same size (scalar or 1D only)
    if (N_input != y_rj.size):
        print('ERROR: First argument x_rj must be the same size as 2nd argument y_rj')
        raise SystemExit
    if (N_input != z_rj.size):
        print('ERROR: First argument x_rj must be the same size as 3rd argument z_rj')
        raise SystemExit
    if (x_rj.ndim > 1):
        print('ERROR: First  argument x_rj must be a scalar number or 1D array of numbers')
        raise SystemExit
    if (y_rj.ndim > 1):
        print('ERROR: Second argument y_rj must be a scalar number or 1D array of numbers')
        raise SystemExit
    if (z_rj.ndim > 1):
        print('ERROR: Third  argument z_rj must be a scalar number or 1D array of numbers')
        raise SystemExit
    
    # Changing inputs to Doubles, and not using input names (so as not to alter inputs, an IDL issue)
    x_in =        x_rj   # X in SYSIII, units Rj
    y_in =        y_rj   # Y in SYSIII, units Rj
    z_in =        z_rj   # Z in SYSIII, units Rj
    
    rho_rj_sq = x_in *x_in + y_in *y_in
    r_rj = np.sqrt(rho_rj_sq + z_in *z_in)
    
    colat_rads = np.arccos(z_in /r_rj)
    elong_rads = np.arctan2(y_in,x_in)
    
    # ######################################################################
    # Start of RTP code.
    # ######################################################################
    
    # Code is not using input names (so as not to alter inputs, an IDL issue)
    r_rj_dbl       =  r_rj
    colat_rads_dbl = colat_rads
    elong_rads_dbl = elong_rads
    
    # ============
    # Begin hard-coding for JRM33_ORDER18
    # Values from Connerney et al. (2022),  https://doi.org/10.1029/2021JE007055
    # See supplemental online information, file 2021JE007055-sup-0002-Supporting Information SI-S02.mod
    # ============
    
    # order = 18; # degree = order for this code 
    # k     = order + 1
    # k     = 19  # order + 1 
    k_plus1 = 20  # k+1, used in for loops when I want to go up to k 
    
    # Arrays rec, g and h are processed (depending on degree) but otherwise do not
    # change. So we calculate them once and use in the code. The initial g and h 
    # values are given in the comments at the top of this code, and are reformatted
    # here in to 1D arrays.
    # g = [       0   ,   410993.4 ,   -71305.9 ,    11796.7 , 
    #        -56972.4 ,    48250.2 ,     2799.3 ,   -37488.4 , 
    #         15396.8 ,    -1489.8 ,   -34402.0 ,    -8080.8 , 
    #         -2440.5 ,   -10848.3 ,   -17919.1 ,   -18265.7 , 
    #          4221.8 ,    16599.5 ,   -17345.8 ,    -2544.5 , 
    #         -4987.7 ,   -20968.0 ,     9887.6 ,    12192.4 , 
    #        -12548.7 ,     2742.2 ,     1557.6 ,     8018.2 , 
    #            59.9 ,     5366.1 ,    -7099.5 ,    -1533.4 , 
    #         -7055.7 ,     3060.6 ,    -2488.3 ,     3700.8 , 
    #         10849.5 ,     1323.8 ,    -6952.2 ,      -95.0 , 
    #         -4746.6 ,    -1301.7 ,    -4284.6 ,    -1436.7 , 
    #         -3024.6 ,     8914.4 ,    -3506.7 ,      288.1 , 
    #           773.6 ,     3592.7 ,    -3170.8 ,     1406.3 , 
    #         -1526.6 ,     1313.3 ,    -2314.6 ,    -2516.5 , 
    #          1883.2 ,     2836.1 ,     4259.4 ,     3776.7 , 
    #           764.4 ,     2112.3 ,      724.8 ,     2496.3 , 
    #           840.1 ,     1179.4 ,     1311.6 ,     3056.9 , 
    #         -2060.6 ,     3550.1 ,      589.7 ,      194.8 , 
    #         -1073.3 ,     -521.7 ,      685.3 ,      350.2 , 
    #          -326.6 ,     1088.8 ,     2300.5 ,     1688.4 , 
    #          -291.7 ,      483.2 ,     -581.9 ,     -818.4 , 
    #         -1095.6 ,    -1987.8 ,      484.5 ,    -1473.1 , 
    #          -666.5 ,     -755.4 ,     -220.8 ,      751.5 , 
    #          -456.4 ,     1160.4 ,    -2307.8 ,      -77.1 , 
    #           -16.9 ,      594.8 ,     -950.7 ,     1042.3 , 
    #          -641.8 ,       41.6 ,     -229.1 ,      -40.3 , 
    #          -287.8 ,     1164.6 ,    -2478.0 ,      907.7 , 
    #         -1280.7 ,      148.5 ,     1468.8 ,       -8.1 , 
    #           604.5 ,      787.2 ,      327.7 ,      111.6 , 
    #           245.2 ,      127.3 ,      425.9 ,        6.3 , 
    #           469.4 ,    -1929.2 ,      -38.7 ,     -815.9 , 
    #          -775.7 ,       31.0 ,     -149.9 ,      318.2 , 
    #          -298.3 ,     -149.3 ,      241.4 ,      -69.4 , 
    #           367.0 ,      -22.2 ,       91.8 ,      -43.7 , 
    #          -809.2 ,     -888.9 ,     -604.0 ,     -339.1 , 
    #          -350.6 ,     -503.8 ,     -235.5 ,        9.0 , 
    #          -498.7 ,     -283.2 ,      -50.9 ,     -515.2 , 
    #          -255.3 ,       15.6 ,      -24.7 ,     -176.5 , 
    #            49.2 ,    -1238.7 ,     -190.2 ,     -101.5 , 
    #           -58.0 ,       10.0 ,     -525.9 ,      468.4 , 
    #            88.1 ,     -385.1 ,       77.6 ,       75.7 , 
    #          -148.9 ,      201.8 ,       61.7 ,     -243.6 , 
    #           168.2 ,      -42.2 ,        7.3 ,     -796.0 , 
    #           443.6 ,      266.9 ,      391.2 ,      366.2 , 
    #           175.8 ,      512.5 ,      151.0 ,      214.9 , 
    #           243.4 ,      337.5 ,      -10.2 ,      -34.9 , 
    #           161.2 ,      222.3 ,     -119.6 ,       28.0 , 
    #           132.6 ,     -180.6 ,     -493.7 ,      486.7 , 
    #           -62.0 ,      539.2 ,      187.4 ,      136.8 , 
    #            -9.4 ,     -581.2 ,      291.8 ,     -198.1 , 
    #            95.5 ,     -372.6 ,      190.7 ,     -119.6 , 
    #           -11.9 ,       74.4 ,     -391.4 ,      -33.1 , 
    #          -118.0 ,      -57.2 ,     -319.9 ,      113.6 , 
    #          -262.2 ,       94.2 ,     -306.7 ,     -139.2 , 
    #          -291.5 ,     -716.6 ,       55.5 ,     -219.0 , 
    #          -165.1 ,     -206.6 ,     -115.7 ,     -117.5 , 
    #           -56.9 ,       -6.9 ,       31.4 ,     -146.9 , 
    #           453.7 ,     -256.5 ,      424.2 ,      -71.5 , 
    #          -157.0 ,     -127.9 ,      -73.9 ,      -98.0 , 
    #           222.1 ,     -299.3 ,     -124.8 ,      155.6 , 
    #            61.0 ,     -137.5 ,      -52.1 ,     -177.1 , 
    #           -51.6 ,       44.3 ,       35.7 ,     -365.8 , 
    #            91.4 ,     -200.6 ,       28.0 ,     -113.8 , 
    #            16.7 ,      -48.6 ,     -197.9 ,      -16.4 , 
    #            84.0 ,      155.6 ,      194.9 ,      -91.6 , 
    #            55.5 ,      183.6 ,       43.1 ,      -16.4 , 
    #          -149.6 ,       33.1 ,      -39.4 ,      123.4 , 
    #           -62.2 ,      -74.9 ,      -28.0 ,      142.1 , 
    #           147.2 ,     -307.5 ,      228.2 ,     -365.4 , 
    #           -53.7 ,     -120.7 ,       23.0 ,       53.9 , 
    #           -25.8 ,     -185.5 ,       65.2 ,      -45.7 , 
    #           -22.3 ,      -34.5 ,       10.4 ,     -158.9 , 
    #           -15.6 ,      -59.4 ,      122.2 ,     -119.5 , 
    #           -18.3 ,      108.2 ,      -35.6 ,      -94.6 , 
    #           147.0 ,      -88.5 ,      199.1 ,     -121.6 , 
    #           128.5 ,      -31.9 ,       38.5 ,      -80.7 , 
    #          -118.6 ,     -177.4 ,       44.8 ,      -26.8 , 
    #          -153.3 ,        7.6 ,      -49.6 ,      -48.7 , 
    #          -122.1 ,       -1.7 ,       40.1 ,      -57.1 , 
    #           -82.7 ,      170.5 ,     -109.1 ,       28.0 , 
    #           -45.5 ,      -42.1 ,       16.4 ,      -42.7 , 
    #           174.8 ,      203.0 ,       42.3 ,       17.1 , 
    #           -79.5 ,       -1.5 ,       31.4 ,       18.8 , 
    #            21.5 ,      -94.6 ,       35.0 ,      -60.6 , 
    #           -11.7 ,      -84.7 ,       60.1 ,        5.8 , 
    #            -4.9 ,       25.9 ,      117.3 ,        9.2 , 
    #            99.6 ,     -126.2 ,       34.2 ,       25.9 , 
    #            23.7 ,       89.8 ,       63.2 ,       42.0 , 
    #            69.7 ,      -12.6 ,       -7.0 ,       58.4 , 
    #            71.8 ,       30.1 ,       24.8 ,        0.7 , 
    #             8.7 ,       10.8 ,      -21.4 ,       -0.1 , 
    #            27.6 ,       17.1 ,       23.1 ,       59.9 , 
    #            89.4 ,       40.0 ,      -30.5 ,      -42.5 , 
    #            29.0 ,      -21.3 ,        5.1 ,     -205.5 , 
    #            60.1 ,     -142.3 ,      -97.3 ,       29.4 , 
    #           -17.8 ,       30.4 ,       23.1 ,       16.1 , 
    #            13.1 ,        8.6 ,       28.3 ,      -14.0 , 
    #            52.4 ,       10.3 ,       17.4 ,      -33.2 , 
    #            12.0 ,       22.1 ,       15.7 ,       42.5 , 
    #            18.8 ,      -62.5 ,      -23.7 ,       15.4 , 
    #           -38.5 ,      -10.2 ,     -106.4 ,      -25.5 , 
    #            -2.6 ,      -86.8 ,      -66.8 ,      -19.6 , 
    #            -3.9 ,       27.8 ,       -9.3 ,       -6.2 , 
    #           -12.2 ,       -6.2 ,       16.7 ,       -9.1 , 
    #            17.8 ,       34.2 ,       -0.4 ,      -30.6 , 
    #            -3.2 ,        2.9 ,        1.7 ,      -19.7 , 
    #             2.2 ,       16.7 ,      -20.5 ,       -3.5 , 
    #             9.8 ,        7.6 ,       12.8 ,      -35.4 , 
    #            43.7 ,       10.5 ,      -23.6 ,       15.3 , 
    #           -22.2 ,        8.2 ,        5.4 ,      -10.1 , 
    #            -4.4 ,      -13.1 ,       -6.5 ,        3.0 , 
    #             4.2 ,      -19.7 ,       13.2 ,        1.2 , 
    #             6.9 ,       -7.7 ,       -1.8 ,        6.1 , 
    #           -27.1 ,      -11.2 ,       40.6 ,        8.1 , 
    #           -14.3 ,       23.9 ,       11.5 ,        2.0 , 
    #            -9.8 ,        5.2 ,        4.1 ,       42.8 , 
    #             5.3 ,       32.2 ,       -0.1 ,        8.0 , 
    #           -12.8 ,       -0.8 ,       -4.6 ,       -3.2 , 
    #             0.8 ,       -5.9 ,        4.4 ,      -14.3 , 
    #            -9.4 ,        8.0 ,       16.1 ,       -3.3 , 
    #             3.6 ,        3.7 ,        1.0 ,      -10.9 , 
    #             4.3 ,       21.2 ,       -5.4 ,        0.7 , 
    #            -5.2 ,      -13.0 ,        5.0 ,      -19.2 , 
    #           -14.3 ,       32.1 ,       28.0 ,       26.9 ]
    # h = [       0   ,        0   ,    20958.4 ,        0   , 
    #        -42549.0 ,    20221.5 ,        0   ,   -32890.6 , 
    #         42518.4 ,   -27397.7 ,        0   ,    32452.4 , 
    #         27438.6 ,     -501.4 ,    -1325.1 ,        0   , 
    #         45363.1 ,     -826.2 ,     6000.6 ,    10568.8 , 
    #         10091.5 ,        0   ,    14016.9 ,   -10119.1 , 
    #          -294.9 ,    13948.3 ,    -3686.9 ,     4783.1 , 
    #             0   ,    -7654.8 ,   -11398.6 ,     2171.0 , 
    #          5301.6 ,    -6618.1 ,    -1933.8 ,    -5802.9 , 
    #             0   ,    -2297.4 ,   -12833.5 ,    10019.6 , 
    #         -1725.6 ,     2387.1 ,    -3237.1 ,      906.1 , 
    #         -3178.3 ,        0   ,    -7899.6 ,    -1328.3 , 
    #          6566.5 ,    -1275.3 ,     3617.1 ,     -194.8 , 
    #          1960.3 ,      956.9 ,     1831.7 ,        0   , 
    #         -5689.8 ,     5570.3 ,    -2541.6 ,    -1795.2 , 
    #          -217.8 ,     -628.3 ,    -1619.6 ,      454.6 , 
    #          -840.0 ,     1581.4 ,        0   ,      549.1 , 
    #          4527.6 ,    -4223.0 ,    -2761.9 ,     -476.0 , 
    #         -2714.4 ,    -1349.2 ,    -1649.0 ,    -1471.5 , 
    #          -583.0 ,     -499.8 ,        0   ,     4204.2 , 
    #          2228.0 ,    -1901.1 ,    -1271.2 ,     1073.4 , 
    #         -1111.9 ,      872.9 ,     -837.9 ,     -462.8 , 
    #           -22.0 ,      110.3 ,     -712.7 ,        0   , 
    #          4125.6 ,      -44.0 ,     -455.4 ,     2160.6 , 
    #           255.4 ,     1105.1 ,     1214.2 ,      196.1 , 
    #          -207.7 ,     1195.7 ,      472.4 ,      721.6 , 
    #            51.3 ,        0   ,     -847.8 ,     -124.9 , 
    #           108.8 ,     1456.2 ,    -1284.6 ,      896.5 , 
    #           237.0 ,      225.8 ,      -80.9 ,      696.9 , 
    #           326.5 ,      225.9 ,       71.0 ,      124.4 , 
    #             0   ,    -1146.4 ,     -580.4 ,      527.3 , 
    #           120.0 ,     -478.9 ,      148.4 ,       45.7 , 
    #          -882.5 ,     -206.6 ,      -74.9 ,       51.0 , 
    #            36.4 ,      -44.4 ,     -285.9 ,      135.1 , 
    #             0   ,     -932.8 ,     -608.1 ,      510.2 , 
    #          -587.4 ,      -39.4 ,      358.1 ,      279.8 , 
    #           244.5 ,      487.3 ,      366.7 ,       93.9 , 
    #           282.8 ,     -267.7 ,       39.8 ,     -213.1 , 
    #            32.4 ,        0   ,     -209.2 ,      -15.8 , 
    #            54.4 ,      308.7 ,      722.0 ,      233.3 , 
    #           -82.1 ,      221.5 ,      488.6 ,      206.3 , 
    #           176.7 ,      353.4 ,      204.8 ,      -29.5 , 
    #            12.8 ,      -89.6 ,     -166.6 ,        0   , 
    #           670.9 ,     -176.1 ,     -340.3 ,       37.0 , 
    #           304.3 ,     -348.8 ,     -291.9 ,      165.6 , 
    #           360.9 ,     -119.0 ,      100.1 ,       26.9 , 
    #             1.0 ,      -60.2 ,       66.5 ,      277.8 , 
    #            29.1 ,       15.3 ,        0   ,       85.8 , 
    #          -412.1 ,     -502.0 ,     -425.1 ,     -232.2 , 
    #          -477.0 ,     -463.5 ,       73.6 ,     -228.3 , 
    #           -96.8 ,     -256.0 ,     -228.0 ,      119.3 , 
    #           -76.9 ,     -319.8 ,     -284.0 ,      197.9 , 
    #          -239.6 ,      302.6 ,        0   ,     -297.6 , 
    #           -13.7 ,     -118.4 ,      105.6 ,      101.9 , 
    #            45.3 ,     -213.0 ,      372.5 ,     -382.8 , 
    #           154.2 ,     -290.3 ,       17.1 ,        6.7 , 
    #            13.2 ,      -49.3 ,      -32.2 ,     -152.8 , 
    #            62.2 ,        8.5 ,       35.0 ,        0   , 
    #          -155.8 ,      312.3 ,      291.1 ,      207.9 , 
    #           165.8 ,      291.2 ,      198.8 ,      442.1 , 
    #          -104.0 ,      209.6 ,      -45.0 ,     -139.6 , 
    #           229.4 ,      -59.8 ,      -30.0 ,     -182.0 , 
    #           162.1 ,      131.7 ,     -356.9 ,      379.5 , 
    #          -318.6 ,        0   ,      -52.5 ,      180.6 , 
    #           182.5 ,      -69.5 ,      -24.5 ,       93.2 , 
    #           188.1 ,       54.5 ,      -68.5 ,       93.8 , 
    #           -87.3 ,     -175.3 ,      202.4 ,      -49.8 , 
    #          -129.2 ,     -241.1 ,      -63.6 ,       68.4 , 
    #           168.1 ,     -160.0 ,       62.6 ,     -117.5 , 
    #             0   ,       52.8 ,       -2.1 ,      -51.9 , 
    #           -92.9 ,       -7.9 ,       21.1 ,       16.4 , 
    #           -51.3 ,     -135.8 ,       56.1 ,     -172.6 , 
    #            40.8 ,       21.3 ,       19.6 ,      -63.1 , 
    #          -135.9 ,       -3.1 ,       55.9 ,      -63.5 , 
    #            -6.3 ,      188.1 ,     -119.3 ,      313.2 , 
    #             0   ,       59.4 ,      -45.4 ,      -76.0 , 
    #            13.9 ,       26.5 ,       63.0 ,        9.1 , 
    #            29.6 ,       -7.6 ,       38.3 ,      -81.6 , 
    #            63.3 ,       40.0 ,       50.3 ,      -52.5 , 
    #           -88.2 ,       99.9 ,       59.3 ,      -52.2 , 
    #           106.4 ,      -62.1 ,       34.6 ,     -171.1 , 
    #            43.5 ,        0   ,       -6.2 ,      -62.4 , 
    #           -17.5 ,       72.8 ,       -6.1 ,      -12.2 , 
    #            28.2 ,      -18.0 ,      122.4 ,      -33.4 , 
    #            24.0 ,       19.7 ,       70.6 ,       62.2 , 
    #           -60.1 ,      -54.4 ,       54.0 ,      -48.5 , 
    #            45.4 ,       24.9 ,      -77.3 ,       36.9 , 
    #             4.8 ,       85.7 ,     -262.0 ,        0   , 
    #             5.1 ,      -50.8 ,        9.5 ,       33.9 , 
    #            -7.2 ,      -73.0 ,      -12.9 ,      -48.1 , 
    #            55.4 ,      -60.8 ,       39.0 ,       46.9 , 
    #            43.8 ,       29.2 ,       -1.9 ,        5.8 , 
    #            36.0 ,     -113.8 ,       29.2 ,      -22.9 , 
    #           -10.0 ,      -23.4 ,      -30.5 ,       66.7 , 
    #           126.9 ,      -43.3 ,        0   ,       23.2 , 
    #             8.1 ,       16.8 ,      -44.1 ,        6.2 , 
    #           -17.0 ,      -30.2 ,        0.7 ,      -45.5 , 
    #           -18.1 ,       13.2 ,       31.8 ,       20.7 , 
    #           -14.4 ,       30.7 ,       41.0 ,       23.0 , 
    #           -56.4 ,        1.6 ,      -14.7 ,      -16.3 , 
    #           -31.1 ,      -32.5 ,      -49.2 ,       79.7 , 
    #           -45.3 ,       35.8 ,        0   ,       -9.5 , 
    #            37.4 ,       14.0 ,      -46.1 ,       -2.3 , 
    #            34.7 ,       -6.7 ,       21.6 ,      -33.1 , 
    #            16.6 ,       -0.5 ,      -20.5 ,       -3.9 , 
    #           -16.5 ,       14.5 ,       20.4 ,      -14.2 , 
    #            15.7 ,      -12.9 ,      -11.8 ,      -42.8 , 
    #            -8.6 ,       27.4 ,      -67.5 ,       -2.2 , 
    #           -19.2 ,       28.9 ,       79.4 ,        0   , 
    #           -23.6 ,       13.4 ,        0.8 ,        9.2 , 
    #            -9.7 ,       17.2 ,       11.0 ,        4.0 , 
    #            14.7 ,       13.9 ,       -2.4 ,      -28.1 , 
    #           -21.7 ,        1.6 ,        1.5 ,       -9.8 , 
    #           -21.9 ,       26.9 ,      -15.6 ,      -12.6 , 
    #           -28.6 ,        8.0 ,       25.6 ,      -11.0 , 
    #           -10.3 ,      -17.9 ,        2.0 ,        5.8 , 
    #            40.6 ,        0   ,       -1.0 ,      -10.2 , 
    #            -8.8 ,       29.1 ,       -2.4 ,      -10.4 , 
    #             6.7 ,       -4.9 ,       16.9 ,        2.3 , 
    #            -1.6 ,       -3.2 ,      -14.0 ,        8.2 , 
    #             0.5 ,       -9.8 ,       -4.4 ,        6.2 , 
    #            -5.8 ,       -4.7 ,        0.1 ,       10.2 , 
    #            -3.4 ,        9.9 ,       -2.5 ,      -11.7 , 
    #           -10.5 ,      -21.5 ,       14.6 ,       38.3 ]
    # These arrays are then extended and manipulated to make larger g and h arrays, and a rec array.
    # ######################################################################
    # The following is the Python code that was used to expand and process the
    # g and h arrays, and create the rec array for pasting the numbers in to
    # this source code:
    #
    # degree = 18      # = order
    # g, h, rec = expand_out_g_and_h(degree,order,g,h)
    # ----------------------------------------------------------------------
    # import numpy as np
    # def expand_out_g_and_h(degree,sh_order,g,h):
    #
    #     # Expand out g and h for later use. i.e. want length = 232 if degree is 20
    #     max_gh_len = int( (degree +1)*(degree)/2+1 + degree + 1 )
    #     # if g and h arrays aren't long enough, pad them to correct size with zeros
    #     if (max_gh_len > len(g)):
    #         g = np.append(g,np.zeros(max_gh_len - len(g),dtype='float64'))
    #     if (max_gh_len > len(h)):
    #         h = np.append(h,np.zeros(max_gh_len - len(h),dtype='float64'))
    #
    #     one_float = np.float64(1)  # = 1.0
    #     two_float = np.float64(2)  # = 2.0
    #     rec = np.zeros(max_gh_len,dtype='float64')
    #
    #     for n in range(1, degree +1 +1):
    #         n2 = np.float64( 2*n-1 )
    #         n2 = n2 * (n2 - two_float)
    #         for m in range(1, n +1):
    #             mn = int( n*(n-1)/2 + m )
    #             rec[mn] = np.float64( (n-m)*(n+m-2) )/n2
    #
    #     s = one_float.copy() # = 1.0
    #     for n in range(2, degree+1 +1):
    #         mn = int( n*(n-1)/2 + 1 )
    #         s = s * np.float64( 2*n - 3 )/np.float64( n - 1 )
    #         p = s.copy() # = a copy of s, not a pointer to s
    #         g[mn] = g[mn] * s
    #         h[mn] = h[mn] * s
    #         for m in range (2, n +1):
    #             if (m == 2):
    #                 aa = two_float.copy() # = 2.0
    #             else:
    #                 aa = one_float.copy() # = 1.0
    #             p = p * np.sqrt( aa*np.float64( n-m+1 )/np.float64( n+m-2 ) )
    #             mnn = int( mn+m-1 )
    #             g[mnn] = g[mnn] * p;
    #             h[mnn] = h[mnn] * p;
    #
    #     # In use, max index called is k*(k-1)/2 + k , where k = order + 1.
    #     # so for k = 11, that's index 66, so size 67 (as indexes start at 0 in Python)
    #     k = sh_order + 1
    #     max_index = int( k*(k-1)/2 + k )
    #     if (len(g) > max_index +1 ):  # +1 for index 0
    #         g   =   g[0:(max_index +1)]
    #     if (len(h) > max_index +1 ):  # +1 for index 0
    #         h   =   h[0:(max_index +1)]
    #     if (len(rec) > max_index +1 ):  # +1 for index 0
    #         rec = rec[0:(max_index +1)]
    #
    #     # Done, return arrays back to main code
    #     return g, h, rec
    # ----------------------------------------------------------------------
    # ######################################################################
    
    rec = np.array([0                         , \
                    0                         ,             0.33333333333333331482962 ,             0                         ,             0.26666666666666666296592 , \
                    0.20000000000000001110223 ,             0                         ,             0.25714285714285711748062 ,             0.22857142857142856429142 , \
                    0.14285714285714284921269 ,             0                         ,             0.25396825396825395415590 ,             0.23809523809523808202115 , \
                    0.19047619047619046561692 ,             0.11111111111111110494321 ,             0                         ,             0.25252525252525254151337 , \
                    0.24242424242424243097105 ,             0.21212121212121212709967 ,             0.16161616161616162989922 ,             0.09090909090909091161414 , \
                    0                         ,             0.25174825174825177231952 ,             0.24475524475524476630817 ,             0.22377622377622377602968 , \
                    0.18881118881118880148406 ,             0.13986013986013987042689 ,             0.07692307692307692734701 ,             0                         , \
                    0.25128205128205127749652 ,             0.24615384615384616751044 ,             0.23076923076923078204103 ,             0.20512820512820512108831 , \
                    0.16923076923076924016343 ,             0.12307692307692308375522 ,             0.06666666666666666574148 ,             0                         , \
                    0.25098039215686274161499 ,             0.24705882352941177515504 ,             0.23529411764705882026405 ,             0.21568627450980393245317 , \
                    0.18823529411764705621124 ,             0.15294117647058824704942 ,             0.10980392156862744945656 ,             0.05882352941176470506601 , \
                    0                         ,             0.25077399380804954454049 ,             0.24767801857585139413409 ,             0.23839009287925697067045 , \
                    0.22291021671826624639401 ,             0.20123839009287924906033 ,             0.17337461300309597866942 ,             0.13931888544891640746570 , \
                    0.09907120743034056320475 ,             0.05263157894736841813099 ,             0                         ,             0.25062656641604008633806 , \
                    0.24812030075187968547468 ,             0.24060150375939848288454 ,             0.22807017543859647856763 ,             0.21052631578947367252397 , \
                    0.18796992481203006475354 ,             0.16040100250626565525636 ,             0.12781954887218044403241 ,             0.09022556390977443108170 , \
                    0.04761904761904761640423 ,             0                         ,             0.25051759834368531043580 ,             0.24844720496894409644817 , \
                    0.24223602484472050999642 ,             0.23188405797101449556941 ,             0.21739130434782608092270 ,             0.19875776397515526605630 , \
                    0.17598343685300207872579 ,             0.14906832298136646342002 ,             0.11801242236024844789455 ,             0.08281573498964803214939 , \
                    0.04347826086956521618454 ,             0                         ,             0.25043478260869567186830 ,             0.24869565217391303990624 , \
                    0.24347826086956522728677 ,             0.23478260869565217849875 ,             0.22260869565217392129775 ,             0.20695652173913042792819 , \
                    0.18782608695652172614565 ,             0.16521739130434781595014 ,             0.13913043478260869734164 ,             0.10956521739130434256460 , \
                    0.07652173913043477937457 ,             0.04000000000000000083267 ,             0                         ,             0.25037037037037035425158 , \
                    0.24888888888888888173412 ,             0.24444444444444443642617 ,             0.23703703703703704608330 ,             0.22666666666666665519436 , \
                    0.21333333333333334702608 ,             0.19703703703703703831174 ,             0.17777777777777778456247 ,             0.15555555555555555802272 , \
                    0.13037037037037035869247 ,             0.10222222222222222820509 ,             0.07111111111111111104943 ,             0.03703703703703703498107 , \
                    0                         ,             0.25031928480204340692339 ,             0.24904214559386972371868 ,             0.24521072796934864634899 , \
                    0.23882503192848020256989 ,             0.22988505747126436462580 ,             0.21839080459770116027229 ,             0.20434227330779056175381 , \
                    0.18773946360153256907033 ,             0.16858237547892720997744 ,             0.14687100893997445671957 ,             0.12260536398467432317450 , \
                    0.09578544061302682322001 ,             0.06641123882503192910054 ,             0.03448275862068965469387 ,             0                         , \
                    0.25027808676307006230388 ,             0.24916573971078975757720 ,             0.24582869855394884339717 ,             0.24026696329254726425262 , \
                    0.23248053392658510341029 ,             0.22246941045606227760345 ,             0.21023359288097887009883 ,             0.19577308120133482538527 , \
                    0.17908787541713014346278 ,             0.16017797552836485208694 ,             0.13904338153503892350216 ,             0.11568409343715238546402 , \
                    0.09010011123470522409473 ,             0.06229143492769743939430 ,             0.03225806451612903136272 ,             0                         , \
                    0.25024437927663734093642 ,             0.24926686217008797719075 ,             0.24633431085043988595373 ,             0.24144672531769306722538 , \
                    0.23460410557184752100568 ,             0.22580645161290321953906 ,             0.21505376344086021833668 ,             0.20234604105571846188738 , \
                    0.18768328445747800570231 ,             0.17106549364613879427033 ,             0.15249266862170088310258 ,             0.13196480938416421668791 , \
                    0.10948191593352883665968 ,             0.08504398826979471526233 ,             0.05865102639296188025142 ,             0.03030303030303030387138 , \
                    0                         ,             0.25021645021645022577417 ,             0.24935064935064935043307 ,             0.24675324675324675216537 , \
                    0.24242424242424243097105 ,             0.23636363636363635909454 ,             0.22857142857142856429142 ,             0.21904761904761904656169 , \
                    0.20779220779220780590535 ,             0.19480519480519481456682 ,             0.18008658008658010030167 ,             0.16363636363636363535434 , \
                    0.14545454545454544748040 ,             0.12554112554112553667984 ,             0.10389610389610390295267 ,             0.08051948051948051854332 , \
                    0.05541125541125541120735 ,             0.02857142857142857053643 ,             0                         ,             0.25019305019305021486886 , \
                    0.24942084942084941090457 ,             0.24710424710424711003398 ,             0.24324324324324325674596 ,             0.23783783783783785104049 , \
                    0.23088803088803089291758 ,             0.22239382239382238237724 ,             0.21235521235521234717503 ,             0.20077220077220075955537 , \
                    0.18764478764478764727386 ,             0.17297297297297298257490 ,             0.15675675675675676545850 ,             0.13899613899613899592467 , \
                    0.11969111969111968785118 ,             0.09884169884169884123803 ,             0.07644787644787644220745 ,             0.05250965250965251157611 , \
                    0.02702702702702702852733 ,             0                         ], dtype='float64')
    
    # This is the modified g array, not the original g coefficients, and will be further modified.
    g = np.array([  0                         , \
                    0                         ,        410993.40000000002328306436539 ,        -71305.89999999999417923390865 ,         17695.05000000000291038304567 , \
               -98679.09142913710093125700951 ,         41785.89893767991452477872372 ,          6998.25000000000000000000000 ,       -114784.31409169112157542258501 , \
                29815.77499244317732518538833 ,         -1177.79031452971298676857259 ,       -150508.75000000000000000000000 ,        -44719.03330350511532742530107 , \
                -9549.96682340441475389525294 ,        -22690.84741462402962497435510 ,        -13251.35315516754053533077240 ,       -143842.38750000001164153218269 , \
                42921.27286392349196830764413 ,        127570.69442965975031256675720 ,        -81633.02337143303884658962488 ,         -5645.04937803636312310118228 , \
                -3499.17460275232133426470682 ,       -302725.50000000000000000000000 ,        186906.53619596210774034261703 ,        182206.05752274760743603110313 , \
              -125020.45832024884293787181377 ,         14963.80719322771983570419252 ,          3624.24518831162868082174100 ,          5385.77113291791010851738974 , \
                 1606.06874999999990905052982 ,        190333.43941625900333747267723 ,       -205607.27056667389115318655968 ,        -31401.55576882112654857337475 , \
               -87130.35157315820106305181980 ,         18897.56891766996704973280430 ,         -6026.22614284811970719601959 ,          2395.37925024410378682659939 , \
               545441.66015625000000000000000 ,         88735.96875000000000000000000 ,       -389895.83466339309234172105789 ,         -3934.85946617597619479056448 , \
              -126906.14003801737271714955568 ,        -19304.97414549050154164433479 ,        -29414.75344365271303104236722 ,         -3601.55780058668460696935654 , \
                -1895.53694641443667023850139 ,        846519.78125000000000000000000 ,       -446765.73728798632510006427765 ,         31302.07698931798586272634566 , \
                64195.52501902574294945225120 ,        202541.11524796698358841240406 ,       -106827.25692624624934978783131 ,         24466.70976716701261466369033 , \
               -11500.67915122823251294903457 ,          3393.53795505362222684198059 ,         -1409.70572312946706006187014 ,       -454041.47851562500000000000000 , \
               458156.33419361733831465244293 ,        597543.35517407325096428394318 ,        703995.08215286664199084043503 ,        441386.13744140026392415165901 , \
                56501.09635237817565212026238 ,         87280.41578810986538883298635 ,         14527.30073426677881798241287 ,         20426.21477027422588435001671 , \
                 2230.28467025431518777622841 ,           700.12476547087453582207672 ,        451779.59531249996507540345192 ,       1425696.72961616632528603076935 , \
              -842884.25393627304583787918091 ,       1164319.22554796561598777770996 ,        141241.38706735140294767916203 ,         30860.91705950191681040450931 , \
              -101016.46548193244962021708488 ,        -25878.59093201200448675081134 ,         15597.45408843598124803975224 ,          3086.98667892851653959951364 , \
                 -888.46463288199674934730865 ,           631.48165122007844729523640 ,       1518777.06982421875000000000000 ,       1514541.16614053281955420970917 , \
              -231939.38036545089562423527241 ,        313703.49667393940035253763199 ,       -283336.19316209433600306510925 ,       -273363.07484114210819825530052 , \
              -228212.28592688051867298781872 ,       -232679.70717926806537434458733 ,         28356.30298026848322479054332 ,        -37627.76339165167155442759395 , \
                -6286.74167907329319859854877 ,         -2101.13289573513384311809205 ,          -125.36317707760989037524268 ,        954107.77587890625000000000000 , \
              -789653.82299604720901697874069 ,       1795741.50312742590904235839844 ,      -2961219.63433324638754129409790 ,        -75875.64023424909100867807865 , \
               -11760.33511734100466128438711 ,        268579.05760751606430858373642 ,       -253967.82629875544807873666286 ,        148831.17948716515093110501766 , \
               -43689.24707565712742507457733 ,          1180.95746522386184551578481 ,         -2299.43438245620791349210776 ,          -114.40525444356161699488439 , \
                 -160.23044573031521053962933 ,       2851549.82666015625000000000000 ,      -8289701.01393300481140613555908 ,       2737105.80220883293077349662781 , \
             -3244612.38580327341333031654358 ,        294104.69388227281160652637482 ,       2110383.41688837250694632530212 ,         -7807.10422955075591744389385 , \
               359614.01589446514844894409180 ,        264157.57543045887723565101624 ,         56165.04780988580023404210806 ,          8730.38241526165438699536026 , \
                 7672.72318359196378878550604 ,          1353.10475804430780044640414 ,          1232.09380338914297681185417 ,             3.44427379209232720214118 , \
              2222050.89990234375000000000000 ,     -12505147.16422460786998271942139 ,       -227647.07574360200669616460800 ,      -4078716.01015456300228834152222 , \
             -3081726.89440846908837556838989 ,         91336.29602817805425729602575 ,       -304771.03315551090054214000702 ,        413792.05147073644911870360374 , \
              -228779.07387668953742831945419 ,        -61839.54010336248757084831595 ,         48983.44547949358093319460750 ,         -6175.46781850216939346864820 , \
                12569.69009327535059128422290 ,          -248.88177309915769797044049 ,           270.27059502196470930357464 ,           -23.48967057586519047163165 , \
             -7421787.28619384765625000000000 ,     -11185517.03530413843691349029541 ,      -6938242.46924477722495794296265 ,      -3343701.81924654915928840637207 , \
             -2787201.33784054592251777648926 ,      -3027579.59005192201584577560425 ,      -1000721.70469564083032310009003 ,         25217.44018011403386481106281 , \
              -855684.15863445226568728685379 ,       -274879.50614382885396480560303 ,        -25634.75913948673405684530735 ,       -122315.37647067446960136294365 , \
               -25613.09163741763404686935246 ,           581.25510950703767321101623 ,          -291.03092421169810677383794 ,          -528.22754698629853464808548 , \
                   26.02953739347100636791765 ,     -22053817.93757629394531250000000 ,      -4654053.44233657978475093841553 ,      -2279135.18871852289885282516479 , \
             -1127879.41262244665995240211487 ,        158777.53174224132089875638485 ,      -6418780.91925374977290630340576 ,       4129457.24128560815006494522095 , \
               525826.80012638925109058618546 ,      -1453685.04687844496220350265503 ,        172342.78492375675705261528492 ,         91514.59797321482619736343622 , \
               -90003.45864076411817222833633 ,         55483.30067757912911474704742 ,          6925.49254490289604291319847 ,         -9821.81918636992850224487484 , \
                 2076.47296197035848308587447 ,          -128.25395542206845789223735 ,             3.80488660722394600455232 ,     -27556639.47601318359375000000000 , \
             21138743.74447606131434440612793 ,      11725886.15045248158276081085205 ,      15001900.80412079766392707824707 ,      11595782.81174719706177711486816 , \
              4343108.73966384027153253555298 ,       9318408.76239543035626411437988 ,       1902153.03082673181779682636261 ,       1760818.49153698235750198364258 , \
              1213715.41193496598862111568451 ,        954140.45271336543373763561249 ,        -15145.53776341473530919756740 ,        -25032.16115029265711200423539 , \
                50866.60293944965087575837970 ,         27727.91238227534631732851267 ,         -5193.76045928344410640420392 ,           361.18519166871919878758490 , \
                  408.88050527757383179050521 ,           -92.81525798533162685544085 ], dtype='float64')
    
    # This is the modified h array, not the original h coefficients, and will be further modified.
    h = np.array([  0                         , \
                    0                         ,             0                         ,         20958.40000000000145519152284 ,             0                         , \
               -73697.02981124815414659678936 ,         17512.33270262702353647910058 ,             0                         ,       -100706.48416748049203306436539 , \
                82336.52755369272199459373951 ,        -21659.78366249880491523072124 ,             0                         ,        179591.12419298454187810420990 , \
               107370.50591299502411857247353 ,         -1048.75334326046368005336262 ,          -979.92466507316260049265111 ,             0                         , \
               461187.64343489689053967595100 ,         -6349.52304212686522078001872 ,         28240.09962311459821648895741 ,         23447.19900435869931243360043 , \
                 7079.80040974297844513785094 ,             0                         ,        264963.20919183432124555110931 ,       -151222.18075837698415853083134 , \
                -2938.03606418524441323825158 ,         76113.94933750208292622119188 ,         -8578.72983101319005072582513 ,          3212.77617244015573305659927 , \
                    0                         ,       -271512.72097865847172215580940 ,       -330112.68882052105618640780449 ,         44458.57413206643104786053300 , \
                65469.09192571333551313728094 ,        -40863.22971117807901464402676 ,         -4683.32440422766285337274894 ,         -3755.98417943188178469426930 , \
                    0                         ,       -153997.59375000000000000000000 ,       -719733.06207425787579268217087 ,        415007.55691891378955915570259 , \
               -46136.02057253671227954328060 ,         35402.09248114033107412979007 ,        -22223.42771144288417417556047 ,          2271.43559762761515230522491 , \
                -1991.86175917113155264814850 ,             0                         ,      -1006436.42691994667984545230865 ,       -144319.85027737272321246564388 , \
               544906.81881777732633054256439 ,        -71895.97914541495265439152718 ,        121863.52687899750890210270882 ,         -3389.11687594690647529205307 , \
                14767.96891140620027726981789 ,          2472.60829147248250592383556 ,          1115.59577164790675851691049 ,             0                         , \
             -1384249.10274789924733340740204 ,       1173617.20366917247883975505829 ,       -420076.51331166969612240791321 ,       -209806.54908645161776803433895 , \
               -16098.82101720037644554395229 ,        -25961.40947766388489981181920 ,        -32461.94297629480570321902633 ,          3719.80820997743148836889304 , \
                -2230.01919177910349390003830 ,           938.76318815977697340713348 ,             0                         ,        256092.79800851742038503289223 , \
              1852005.60425209673121571540833 ,      -1385008.89819696894846856594086 ,       -661513.62886436795815825462341 ,        -75409.63306120591005310416222 , \
              -255472.92826251508085988461971 ,        -66926.19299495992891024798155 ,        -37531.30277518012007931247354 ,        -12971.16190189409462618641555 , \
                -1585.96105624679739776183851 ,          -289.87374107255254784831777 ,             0                         ,       3771282.85399669967591762542725 , \
              1771549.32963395491242408752441 ,      -1234233.68693465669639408588409 ,       -618967.12278338952455669641495 ,        358538.51971466519171372056007 , \
              -231607.55816182776470668613911 ,        102176.33383478372707031667233 ,        -49039.72397764078777981922030 ,        -11821.41667073273674759548157 , \
                 -207.51435399791816394099442 ,           306.79766798991960286002723 ,          -404.64826224281051736397785 ,             0                         , \
              7138027.63398880977183580398560 ,        -68090.85327267039974685758352 ,       -584339.81344802852254360914230 ,       2126289.34228428779169917106628 , \
               177727.19461354395025409758091 ,        499002.54970085067907348275185 ,        324358.61438092868775129318237 ,         28001.33771220673952484503388 , \
               -14138.76070055155105364974588 ,         33944.01060500412131659686565 ,          4741.39154200049142673378810 ,          2048.50698775369892246089876 , \
                   28.56088209160934354713390 ,             0                         ,      -2836161.63019063789397478103638 ,       -376627.20579033077228814363480 , \
               275641.31145107839256525039673 ,       2884008.45273646945133805274963 ,      -1845723.40504820505157113075256 ,        864082.58540645090397447347641 , \
               140990.11044993918039835989475 ,         75770.80860289330303203314543 ,        -13865.58549838194085168652236 ,         54517.95255551834270590916276 , \
                10216.73784438326401868835092 ,          2401.14976309669418697012588 ,           205.39718253258783420278633 ,            68.01073964068024224616238 , \
                    0                         ,      -7431008.03911833465099334716797 ,      -3414117.90081619098782539367676 ,       2635993.32290047919377684593201 , \
               476740.01202657766407355666161 ,      -1410998.45702885393984615802765 ,        301721.28966162650613114237785 ,         59428.96528036661766236647964 , \
              -676827.12938712199684232473373 ,        -85573.00057169918727595359087 ,        -15198.26042425049308803863823 ,          4538.16799342378362780436873 , \
                 1246.69405829760967208130751 ,          -497.76354619831539594088099 ,          -841.72508841807962198799942 ,            72.61909599083264765795320 , \
                    0                         ,     -11737934.85266250371932983398438 ,      -6985339.81050951872020959854126 ,       5030836.53252606745809316635132 , \
             -4669714.96248584240674972534180 ,       -236773.79088536268682219088078 ,       1521691.90000640763901174068451 ,        783982.19582176744006574153900 , \
               419520.30636880605015903711319 ,        472982.99203350214520469307899 ,        184681.06437032978283241391182 ,         22293.11694603325304342433810 , \
                28372.04197047280467813834548 ,         -9974.48671891243429854512215 ,           468.94861472168355476242141 ,          -637.76368420838650763471378 , \
                   17.14140267374919801568467 ,             0                         ,      -5118969.40135022345930337905884 ,       -354781.63528820360079407691956 , \
              1057873.10425277752801775932312 ,       4901462.40488298889249563217163 ,       8812245.33884998597204685211182 ,       2056794.13832607283256947994232 , \
              -490015.66731414932291954755783 ,        836123.70263198018074035644531 ,       1085137.68961014901287853717804 ,        249398.43542766472091898322105 , \
               106807.32801761597511358559132 ,         97164.51169205382757354527712 ,         22987.69648616066842805594206 ,         -1189.42391624758988655230496 , \
                  158.01934550071698026840750 ,          -272.31171577766190239344724 ,           -86.83480941965882493605022 ,             0                         , \
             31970205.54140890017151832580566 ,      -7736712.44321724306792020797729 ,     -13049966.36922880262136459350586 ,       1171611.04324043216183781623840 , \
              7517679.12104497570544481277466 ,      -6341972.63672883156687021255493 ,      -3677075.95826703961938619613647 ,       1356870.83386935433372855186462 , \
              1799629.79526429413817822933197 ,       -336422.85591967549407854676247 ,        148634.15001155048958025872707 ,         19294.12994105651523568667471 , \
                  315.54964602636260906365351 ,         -7508.86336218162796285469085 ,          2887.83503797950743319233879 ,          3583.47308019893534947186708 , \
                   89.73169459711462536688487 ,             7.86308663995334367058376 ], dtype='float64')
    
    # ============
    # End parts that are hard-coded for JRM33_ORDER18
    # ============
    
    if scalar_input:
        a         = np.array([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],dtype='float64') # = np.zeros(k_plus1,dtype='float64')
        DINDGEN_k = np.array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19],dtype='float64') # = 0:k, done manually for speed
    else:
        a         = np.zeros((N_input,k_plus1),dtype='float64')
        DINDGEN_k = a.copy()
        for i in range(k_plus1):
            DINDGEN_k[:,i] = i
    
    da = np.float64(1)/r_rj_dbl
    if scalar_input:
        a[0] = da
        for i in range(1,k_plus1):
            a[i] = a[i-1]*da
    else:
        a[:,0] = da
        for i in range(1,k_plus1):
            a[:,i] = a[:,i-1]*da
    
    b = a  * DINDGEN_k
    
    cos_phi   = np.cos(elong_rads_dbl,dtype='float64')
    sin_phi   = np.sin(elong_rads_dbl,dtype='float64')
    cos_theta = np.cos(colat_rads_dbl,dtype='float64')
    sin_theta = np.sin(colat_rads_dbl,dtype='float64')
    not_bk = (sin_theta >= 0.00001 )  # = 1d-5 - also see bk both times below
    if scalar_input:
        # bk = (sin_theta <  0.00001 )  # bk not needed for scalar
        zero_array = np.float64(0)
        p   = np.float64(1)
        d   = zero_array.copy()
        bbr = zero_array.copy()
        bbt = zero_array.copy()
        bbf = zero_array.copy()
        x = zero_array.copy()
        y = p.copy()
    else:
        bk = (sin_theta <  0.00001 )
        zero_array = np.zeros(N_input,dtype='float64')
        p   = zero_array + np.float64(1)
        d   = zero_array.copy()
        bbr = zero_array.copy()
        bbt = zero_array.copy()
        bbf = zero_array.copy()
        x = zero_array.copy()
        y = p.copy() # 1s
    
    for m in range(1, k_plus1):
        bm  = (m != 1)
        if bm:
            m_minus_1 = np.float64(m - 1)
            w = x.copy()
            x = w *cos_phi + y *sin_phi
            y = y *cos_phi - w *sin_phi
        q = p.copy()
        z = d.copy()
        bi = zero_array.copy()
        p2 = zero_array.copy()
        d2 = zero_array.copy()
        for n in range(m, k_plus1):
            mn = int( n*(n-1)/2 + m )
            w  = g[mn]*y + h[mn]*x
            if scalar_input:
                bbr += b[  n]*w*q
                bbt -= a[  n]*w*z
                if bm:
                    if not_bk:
                        bi += a[n] * (g[mn]*x-h[mn]*y) * q
                    else:
                        bi += a[n] * (g[mn]*x-h[mn]*y) * z
            else:
                bbr += b[:,n]*w*q
                bbt -= a[:,n]*w*z
                if bm:
                    qq = q.copy()
                    ind = np.where(bk)[0]
                    if (len(ind) != 0):
                        qq[ind] = z[ind]
                    bi += a[:,n] * (g[mn]*x-h[mn]*y) * qq
            xk = rec[mn] # faster to write this to xk, to use below twice
            dp = cos_theta *z - sin_theta *q - d2*xk
            pm = cos_theta *q                - p2*xk
            d2 = z.copy()
            p2 = q.copy()
            z = dp.copy()
            q = pm.copy()
        d = sin_theta *d + cos_theta *p
        p = sin_theta *p
        if bm:
            bi  *= m_minus_1
            bbf += bi
    
    # br = bbr  # This doesn't change again
    # bt = bbt  # This doesn't change again
    if scalar_input:
        if not_bk:
            bf = bbf/sin_theta
        else:
            if (cos_theta >= 0):
                bf =  bbf.copy()
            else:
                bf = np.float64(-1)*bbf
    else:
        bf = bbf.copy() # set size of array and do the 3rd case
        ind = np.where((bk == 1) & (cos_theta < 0))[0]
        if (len(ind) != 0):
            bf[ind] = -bbf[ind]
        ind = np.where(bk == 0)[0]
        if (len(ind) != 0):
            bf[ind] =  bbf[ind]/sin_theta[ind]
    
    # ######################################################################
    # End of RTP code.
    # ######################################################################
    # if scalar_input:
    #     return             np.array([[bbr,bbt,bf]])
    # else:
    #     return np.transpose(np.array([bbr,bbt,bf]))
    
    # Convert to cartesian coordinates
    # Each line is one component, Bx, By then Bz
    Bxyz = np.array([ \
        bbr *sin_theta *cos_phi + bbt *cos_theta *cos_phi - bf *sin_phi , \
        bbr *sin_theta *sin_phi + bbt *cos_theta *sin_phi + bf *cos_phi , \
        bbr *cos_theta          - bbt *sin_theta                          \
        ]) # size 3 x n, or just size 3 if scalar
    if scalar_input:
        return    np.array([Bxyz]) # size 1 x 3
    else:
        return np.transpose(Bxyz)  # size n x 3
